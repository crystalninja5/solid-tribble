//  Based on the example provided by Nicholas Lauer 

#import <Foundation/Foundation.h>
#import <objc/runtime.h>

#define UBEEXPERIMENT_NAMES_APP \
  X(UBExperimentNameSomething, @"some_random_experiment")

#define X(name, value) extern NSString *const name;
UBEEXPERIMENT_NAMES_APP
#undef X

@interface Test : NSObject

- (id)andReturn:(id)anObject;
- (id)andReturnValue:(NSValue *)aValue;

@property (nonatomic, readonly) Test *(^ _andReturn)(id);

@end

@protocol UBCachedExperimenting

- (BOOL)isValidExperiment:(NSString *)experimentKey;

- (BOOL)isInControlGroupForExperiment:(NSString *)experimentKey;

- (BOOL)isTreatedForExperiment:(NSString *)experimentKey;

- (BOOL)isInTreatmentGroup:(NSString *)treatmentGroupKey
             forExperiment:(NSString *)experimentKey;

- (nullable NSString *)stringParameter:(NSString *)parameterName
                         forExperiment:(NSString *)experimentKey
                      withDefaultValue:(nullable NSString *)defaultValue;

- (nullable NSNumber *)numberParameter:(NSString *)parameterName
                         forExperiment:(NSString *)experimentKey
                      withDefaultValue:(nullable NSNumber *)defaultValue;

- (void)sendInclusionEventForExperiment:(NSString *)experimentKey;

- (void)sendInclusionEventForExperiment:(NSString *)experimentKey
                      forTreatmentGroup:(NSString *)treatmentGroupKey;

@end


@interface UBEExperimentExamples : NSObject

@property(nonatomic, readonly) id<UBCachedExperimenting> experiments;
@property(nonatomic, readonly) id experimentsMock;

@end

@implementation UBEExperimentExamples

- (void)featureFlag_treated {
      NSLog(@"1");

      NSLog(@"2");

      NSLog(@"3");

      NSLog(@"4");

  

      NSLog(@"7");

      NSLog(@"8");

  

  

  

  

  int x;
  if (x) {
    NSLog(@"13");
  }

  if (x) {
    NSLog(@"14");
  }

}

- (void)featureFlag_control {
      NSLog(@"control");
}

// Group names are TODO
- (void)featureFlag_specificGroup {
  if ([self.experiments
          isInTreatmentGroup:@"groupname"
               forExperiment:UBExperimentNameSomething]) {
    NSLog(@"treated for groupname treatment group");
  }
}

// Non boolean returns are TODO
- (void)featureFlag_stringParameter {
  NSString *string = [self.experiments
       stringParameter:@"param_name"
         forExperiment:UBExperimentNameSomething
      withDefaultValue:@"default"];
  NSLog(@"%@", string);
}

- (void)featureFlag_numberParameter {
  NSNumber *number = [self.experiments
       numberParameter:@"param_name"
         forExperiment:UBExperimentNameSomething
      withDefaultValue:@2];
  NSLog(@"%@", number);
}

- (void)featureFlag_inclusions {
  
  
}

#pragma mark - Tests


- (void)featureFlag_test {
  
  
  [self setNumberParameter:@"" value:@2 forExperimentNamed:@""];
  [self enableExperimentNamed:@"experiment"
            forTreatmentGroup:@"treatmentGroup"];
}


- (void)featureFlag_variants {
  [self testAllFeatureFlagVariants:^(NSArray<NSString *> *enabledFlags) {
  }
                  featureFlagNames:@[
                    
                  ]];
}

- (void)featureFlag_snapshotVariants {
  [self snapshotTestAllFeatureFlagVariants:^(NSArray<NSString *> *enabledFlags,
                                             NSString *identifier) {
    // test code
  }
                          featureFlagNames:@[
                            
                          ]];
}

#pragma mark - helpers

// Enable a feature flag for all treatment groups. Cleared at the end of every
// test
- (void)enableFeatureFlagNamed:(NSString *)name {
  return;
}

// Enable an experiment for one treatment group. Cleared at the end of every
// test
- (void)enableExperimentNamed:(NSString *)name
            forTreatmentGroup:(NSString *)treatmentGroup {
  return;
}

// Enable an experiment for one treatment group. Cleared at the end of every
// test
- (void)setNumberParameter:(NSString *)parameterName
                     value:(NSNumber *)number
        forExperimentNamed:(NSString *)name {
  return;
}

/** Puts experiment in control */
 - (void)disableExperimentNamed:(NSString *)name {
  return;
}

typedef void (^FeatureFlagTestBlock)(NSArray<NSString *> *enabledFlags);
typedef void (^SnapshotTestBlock)(NSArray<NSString *> *enabledFlags,
                                  NSString *identifier);

// Runs the test block with all possible combinations of experiments enabled and
// disabled.
- (void)testAllFeatureFlagVariants:(FeatureFlagTestBlock)testBlock
                  featureFlagNames:(NSArray<NSString *> *)featureFlagNames {
  return;
}

// Runs the test block with all possible combinations of experiments enabled and
// disabled. Passes in an identifier for the snapshot
- (void)snapshotTestAllFeatureFlagVariants:(SnapshotTestBlock)testBlock
                          featureFlagNames:
                              (NSArray<NSString *> *)featureFlagNames {
  return;
}

@end
